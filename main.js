(()=>{"use strict";var e={919:(e,t,r)=>{r.d(t,{A:()=>s});var o=r(354),n=r.n(o),i=r(314),a=r.n(i)()(n());a.push([e.id,"*{box-sizing:border-box}body{background-color:#000;color:#fff;margin:0;box-sizing:border-box;height:100svh;overflow:hidden}.header{display:flex;justify-content:space-around;align-items:center;border-bottom:1px ridge #fff;height:80px}.header button.newGame{border:none;width:120px;height:40px;border-radius:1rem;background-color:dimgray;color:#fff}.header button.newGame:hover{opacity:75%;cursor:pointer}.header button.newGame:hover:active{opacity:55%}.newGameDialog{width:300px;height:25%;position:relative;border-radius:.4rem;box-shadow:1px 1px 3px 4px #e0ffff;border:none}.newGameDialog .newGameFieldset{display:flex;justify-content:center;align-items:center;gap:2rem;height:100%;border:none}.newGameDialog .newGameFieldset .gameTypeBtn{border:none;border-radius:1rem;width:100px;height:60px;background-color:#1e90ff;cursor:pointer}.newGameDialog .newGameFieldset .gameTypeBtn:active{opacity:80%}.newGameDialog .exitDialog{position:absolute;top:4%;right:1%}.twoBoardsScreen{display:grid;grid-template-columns:1fr .5fr 1fr;height:calc(100svh - 80px - 60px);justify-items:center;align-content:center}.twoBoardsScreen .centerBoard{border:1px solid pink;width:100%;display:flex;justify-content:center;align-items:center}.twoBoardsScreen .boardOne,.twoBoardsScreen .boardTwo{display:flex;flex-flow:wrap;width:400px;height:400px}.twoBoardsScreen .boardOne div,.twoBoardsScreen .boardTwo div{border:1px solid green}.twoBoardsScreen .boardOne div:hover,.twoBoardsScreen .boardTwo div:hover{background-color:red !important}.footer{display:flex;justify-content:left;align-items:center;box-shadow:0px 0px 3px 1px #fff;background-color:gray;height:50px;padding:10px}.footer a{display:flex;justify-content:center;align-items:center;color:#000;text-decoration:none;padding-left:6rem}","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA,EAAE,qBAAqB,CAAC,KAAK,qBAAqB,CAAC,UAAU,CAAC,QAAQ,CAAC,qBAAqB,CAAC,aAAa,CAAC,eAAe,CAAC,QAAQ,YAAY,CAAC,4BAA4B,CAAC,kBAAkB,CAAC,4BAA4B,CAAC,WAAW,CAAC,uBAAuB,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,UAAU,CAAC,6BAA6B,WAAW,CAAC,cAAc,CAAC,oCAAoC,WAAW,CAAC,eAAe,WAAW,CAAC,UAAU,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,kCAAkC,CAAC,WAAW,CAAC,gCAAgC,YAAY,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,WAAW,CAAC,WAAW,CAAC,6CAA6C,WAAW,CAAC,kBAAkB,CAAC,WAAW,CAAC,WAAW,CAAC,wBAAwB,CAAC,cAAc,CAAC,oDAAoD,WAAW,CAAC,2BAA2B,iBAAiB,CAAC,MAAM,CAAC,QAAQ,CAAC,iBAAiB,YAAY,CAAC,kCAAkC,CAAC,iCAAiC,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,8BAA8B,qBAAqB,CAAC,UAAU,CAAC,YAAY,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,sDAAsD,YAAY,CAAC,cAAc,CAAC,WAAW,CAAC,YAAY,CAAC,8DAA8D,sBAAsB,CAAC,0EAA0E,+BAA+B,CAAC,QAAQ,YAAY,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,+BAA+B,CAAC,qBAAqB,CAAC,WAAW,CAAC,YAAY,CAAC,UAAU,YAAY,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,UAAU,CAAC,oBAAoB,CAAC,iBAAiB",sourcesContent:["*{box-sizing:border-box}body{background-color:#000;color:#fff;margin:0;box-sizing:border-box;height:100svh;overflow:hidden}.header{display:flex;justify-content:space-around;align-items:center;border-bottom:1px ridge #fff;height:80px}.header button.newGame{border:none;width:120px;height:40px;border-radius:1rem;background-color:dimgray;color:#fff}.header button.newGame:hover{opacity:75%;cursor:pointer}.header button.newGame:hover:active{opacity:55%}.newGameDialog{width:300px;height:25%;position:relative;border-radius:.4rem;box-shadow:1px 1px 3px 4px #e0ffff;border:none}.newGameDialog .newGameFieldset{display:flex;justify-content:center;align-items:center;gap:2rem;height:100%;border:none}.newGameDialog .newGameFieldset .gameTypeBtn{border:none;border-radius:1rem;width:100px;height:60px;background-color:#1e90ff;cursor:pointer}.newGameDialog .newGameFieldset .gameTypeBtn:active{opacity:80%}.newGameDialog .exitDialog{position:absolute;top:4%;right:1%}.twoBoardsScreen{display:grid;grid-template-columns:1fr .5fr 1fr;height:calc(100svh - 80px - 60px);justify-items:center;align-content:center}.twoBoardsScreen .centerBoard{border:1px solid pink;width:100%;display:flex;justify-content:center;align-items:center}.twoBoardsScreen .boardOne,.twoBoardsScreen .boardTwo{display:flex;flex-flow:wrap;width:400px;height:400px}.twoBoardsScreen .boardOne div,.twoBoardsScreen .boardTwo div{border:1px solid green}.twoBoardsScreen .boardOne div:hover,.twoBoardsScreen .boardTwo div:hover{background-color:red !important}.footer{display:flex;justify-content:left;align-items:center;box-shadow:0px 0px 3px 1px #fff;background-color:gray;height:50px;padding:10px}.footer a{display:flex;justify-content:center;align-items:center;color:#000;text-decoration:none;padding-left:6rem}"],sourceRoot:""}]);const s=a},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",o=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),o&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),o&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,o,n,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var A=[].concat(e[l]);o&&a[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),r&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=r):A[2]=r),n&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=n):A[4]="".concat(n)),t.push(A))}},t}},354:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),n="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(n," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function r(e){for(var r=-1,o=0;o<t.length;o++)if(t[o].identifier===e){r=o;break}return r}function o(e,o){for(var i={},a=[],s=0;s<e.length;s++){var c=e[s],l=o.base?c[0]+o.base:c[0],A=i[l]||0,d="".concat(l," ").concat(A);i[l]=A+1;var h=r(d),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==h)t[h].references++,t[h].updater(u);else{var p=n(u,o);o.byIndex=s,t.splice(s,0,{identifier:d,updater:p,references:1})}a.push(d)}return a}function n(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,n){var i=o(e=e||[],n=n||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=r(i[a]);t[s].references--}for(var c=o(e,n),l=0;l<i.length;l++){var A=r(i[l]);0===t[A].references&&(t[A].updater(),t.splice(A,1))}i=c}}},659:e=>{var t={};e.exports=function(e,r){var o=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(r)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var o="";r.supports&&(o+="@supports (".concat(r.supports,") {")),r.media&&(o+="@media ".concat(r.media," {"));var n=void 0!==r.layer;n&&(o+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),o+=r.css,n&&(o+="}"),r.media&&(o+="}"),r.supports&&(o+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function r(o){var n=t[o];if(void 0!==n)return n.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,r),i.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.nc=void 0;var o=r(72),n=r.n(o),i=r(825),a=r.n(i),s=r(659),c=r.n(s),l=r(56),A=r.n(l),d=r(540),h=r.n(d),u=r(113),p=r.n(u),f=r(919),C={};function g(e,t){const r=document.querySelector(`.${t}`);r.innerHTML="";for(let o=0;o<e*e;o++){const n=document.createElement("div");let i;i=o<10?`0${o}`:o,n.classList.add("square",`${t}`,`${i.toString().split("").join(":")}`),n.style.width=400/e+"px",n.style.height=400/e+"px",n.style.backgroundColor="lightgray",r.appendChild(n)}}C.styleTagTransform=p(),C.setAttributes=A(),C.insert=c().bind(null,"head"),C.domAPI=a(),C.insertStyleElement=h(),n()(f.A,C),f.A&&f.A.locals&&f.A.locals;class m{constructor(e){this.length=e,this.direction="",this.hits=0,this.sunk=!1,this.cordinates=[],this.clicked=[]}hit(){return this.hits++}isSunk(){return this.hits==this.length&&(this.sunk=!0)}}class b{constructor(){this.board=b.newGameBoard(),this.ships=[new m(1),new m(1),new m(1),new m(1),new m(2),new m(2),new m(2),new m(3),new m(3),new m(4)],this.clickedNoShip=[],this.sunkShips=[],this.clicked=[]}static newGameBoard(){let e=[];for(let t=0;t<10;t++){let t=[];for(;t.length<10;)t.push(null);e.push(t)}return e}isAllShipsSunk(){return this.sunkShips.length==this.ships.length}placeShip(){const e=["horizontal","vertical"];for(let t=0;t<this.ships.length;t++){let r=!1,o=0;const n=1e4;for(;!r&&o<n;){const i=Math.floor(10*Math.random()),a=Math.floor(10*Math.random()),s=e[Math.floor(Math.random()*e.length)];this.ships[t].direction=s;let c=!0;if("vertical"===s){if(i+this.ships[t].length-1>=10)c=!1;else for(let e=-1;e<=this.ships[t].length;e++){for(let t=-1;t<=1;t++)if(i+e>=0&&i+e<10&&a+t>=0&&a+t<10&&null!==this.board[i+e]?.[a+t]){c=!1;break}if(!c)break}if(c){for(let e=0;e<this.ships[t].length;e++)this.board[i+e][a]=1,this.ships[t].cordinates.push(`${i+e}:${a}`);r=!0}}else if("horizontal"===s){if(a+this.ships[t].length-1>=10)c=!1;else for(let e=-1;e<=this.ships[t].length;e++){for(let t=-1;t<=1;t++)if(i+t>=0&&i+t<10&&a+e>=0&&a+e<10&&null!==this.board[i+t]?.[a+e]){c=!1;break}if(!c)break}if(c){for(let e=0;e<this.ships[t].length;e++)this.board[i][a+e]=1,this.ships[t].cordinates.push(`${i}:${a+e}`);r=!0}}o++,o>=n&&t--}o>=n&&(console.error("Failed to place the ship after maximum attempts"),this.resetBoard(),t=-1)}}receiveAttack(e,t){if(this.clicked.includes(e))return console.log("already clicked"),!1;if(this.clicked.push(e),this.isAllShipsSunk())return;if(this.clickedNoShip.includes(e))return;let r=!1;return this.ships.forEach((o=>{if(!o.clicked.includes(e))if(o.cordinates.includes(e)){if(o.hit(),o.clicked.push(e),this.board[e.slice(0,1)][e.slice(2)]=2,t.style.background="gray center/110% url('./image/noun-ship-4897095.svg')",r=!0,o.isSunk()){for(let e=0;e<o.cordinates.length;e++)for(let r=0;r<t.parentNode.children.length;r++)t.parentNode.children[r].classList.contains(o.cordinates[e])&&(t.parentNode.children[r].style.backgroundColor="orange");this.sunkShips.push(o)}}else r||this.clickedNoShip.includes(e)||(this.clickedNoShip.push(e),t.style.backgroundColor="red")})),!0}}class y{constructor(e,t){this.type=e,this.name=t,this.gameBoard=new b}playerTypeBoardBuilding(){let e;e="real"==this.type?".boardOne":".boardTwo";let t=[];for(let e=0;e<this.gameBoard.board.length;e++)for(let r=0;r<this.gameBoard.board[e].length;r++)null!==this.gameBoard.board[e][r]&&t.push(`${e}:${r}`);document.querySelectorAll(`${e}.square`).forEach((e=>{e.style.backgroundColor="lightgray";for(let r=0;r<=t.length;r++)e.classList.contains(t[r])&&("real"==this.type?e.style.background="white center/110% url('./image/noun-ship-4897095.svg')":e.style.backgroundColor="lightgray")}))}machineAttack(){}}class B{constructor(e,t){this.players=[e,t],this.currentTurnIndex=0}getCurrnetPlayer(){return this.players[this.currentTurnIndex]}swichTurns(){this.currentTurnIndex=1-this.currentTurnIndex}startGame(){this.players.forEach((e=>{e.gameBoard.placeShip(),e.playerTypeBoardBuilding()}))}gameOver(){return this.players[0].gameBoard.isAllShipsSunk()||this.players[1].gameBoard.isAllShipsSunk()}playGame(){if(this.gameOver())return;const e=this.getCurrnetPlayer(),t=this.players[1-this.currentTurnIndex];let r;r=e==this.players[1]?".boardOne":".boardTwo";const o=document.querySelectorAll(`${r}.square`),n=r=>{if(r.target.classList.add("clickedSquare"),t.gameBoard.receiveAttack(r.target.classList[2],r.target)){if(t.gameBoard.isAllShipsSunk())return void console.log(`${e.name} wins!`);this.swichTurns(),o.forEach((e=>e.removeEventListener("click",n))),this.playGame()}};o.forEach((e=>{e.addEventListener("click",n,{once:!0})}));const i=document.querySelectorAll(".boardOne.square");"machine"==e.type&&setTimeout((()=>{(()=>{let e=Array.from(i).filter((e=>!e.classList.contains("clickedSquare")));e[Math.floor(Math.random()*e.length)].click()})()}),500)}}g(10,"boardOne"),g(10,"boardTwo"),document.querySelector(".humanVsHumanNewGameBtn").addEventListener("click",(()=>{const e=new y("real","Human"),t=new y("machine","Machina"),r=new B(e,t);r.startGame(),r.playGame(),x.close()}));const w=document.querySelector(".newGame"),x=document.querySelector(".newGameDialog");w.addEventListener("click",(()=>{x.showModal(),document.querySelector(".exitDialog").onclick=()=>{x.close()}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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d0wsYUFFTE8sRUFBYzdCLFNBQVM5QyxHQUNyQkEsRUFBTzZFLG9CQUFvQixRQUFTRCxLQUd0Q2hNLEtBQUs0TCxVQUNQLEdBRUZHLEVBQWM3QixTQUFTOUMsSUFDckJBLEVBQU84RSxpQkFBaUIsUUFBU0YsRUFBYSxDQUFFRyxNQUFNLEdBQU8sSUFHL0QsTUFBTUMsRUFBa0J0SSxTQUFTaUgsaUJBQWlCLG9CQVd4QixXQUF0QmMsRUFBY3BCLE1BQ2hCNEIsWUFBVyxLQVZjLE1BQ3pCLElBQUlDLEVBQXNCQyxNQUFNQyxLQUFLSixHQUFpQkssUUFDbkQ1QixJQUFPQSxFQUFFdkQsVUFBVWlELFNBQVMsbUJBRVIrQixFQUFvQmxELEtBQUtDLE1BQU1ELEtBQUtFLFNBQVdnRCxFQUFvQmhNLFNBRXpFb00sT0FBTyxFQUt0QkMsRUFBb0IsR0FDbkIsSUFDUCxFQzNFRjVGLEVBQVcsR0FBSSxZQUNmQSxFQUFXLEdBQUksWUFJZ0JqRCxTQUFTQyxjQUFjLDJCQUUvQm1JLGlCQUFpQixTQUFVLEtBQ2hELE1BQU1VLEVBQVksSUFBSXBDLEVBQU8sT0FBUSxTQUMvQnFDLEVBQWdCLElBQUlyQyxFQUFPLFVBQVcsV0FDdENzQyxFQUFPLElBQUk1QixFQUFLMEIsRUFBV0MsR0FDakNDLEVBQUtyQixZQUNMcUIsRUFBS2xCLFdBQ0xtQixFQUFjQyxPQUFPLElBSXZCLE1BQU1DLEVBQWFuSixTQUFTQyxjQUFjLFlBQ3BDZ0osRUFBZ0JqSixTQUFTQyxjQUFjLGtCQUU3Q2tKLEVBQVdmLGlCQUFpQixTQUFTLEtBQ25DYSxFQUFjRyxZQUVRcEosU0FBU0MsY0FBYyxlQUUvQm9KLFFBQVUsS0FDdEJKLEVBQWNDLE9BQU8sQ0FDdEIsRyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlbXBsYXRlLy4vc3JjL3N0eWxlcy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3RlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3RlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3RlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3RlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly90ZW1wbGF0ZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90ZW1wbGF0ZS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90ZW1wbGF0ZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly90ZW1wbGF0ZS93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUvLi9zcmMvc3R5bGVzL3N0eWxlLmNzcz9mZjk0Iiwid2VicGFjazovL3RlbXBsYXRlLy4vc3JjL3NjcmlwdHMvYnVpbGRCb2FyZERPTS5qcyIsIndlYnBhY2s6Ly90ZW1wbGF0ZS8uL3NyYy9zY3JpcHRzL1NoaXAuanMiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUvLi9zcmMvc2NyaXB0cy9nYW1lYm9hcmQuanMiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUvLi9zcmMvc2NyaXB0cy9wbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUvLi9zcmMvc2NyaXB0cy9nYW1lLmpzIiwid2VicGFjazovL3RlbXBsYXRlLy4vc3JjL3NjcmlwdHMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYCp7Ym94LXNpemluZzpib3JkZXItYm94fWJvZHl7YmFja2dyb3VuZC1jb2xvcjojMDAwO2NvbG9yOiNmZmY7bWFyZ2luOjA7Ym94LXNpemluZzpib3JkZXItYm94O2hlaWdodDoxMDBzdmg7b3ZlcmZsb3c6aGlkZGVufS5oZWFkZXJ7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1hcm91bmQ7YWxpZ24taXRlbXM6Y2VudGVyO2JvcmRlci1ib3R0b206MXB4IHJpZGdlICNmZmY7aGVpZ2h0OjgwcHh9LmhlYWRlciBidXR0b24ubmV3R2FtZXtib3JkZXI6bm9uZTt3aWR0aDoxMjBweDtoZWlnaHQ6NDBweDtib3JkZXItcmFkaXVzOjFyZW07YmFja2dyb3VuZC1jb2xvcjpkaW1ncmF5O2NvbG9yOiNmZmZ9LmhlYWRlciBidXR0b24ubmV3R2FtZTpob3ZlcntvcGFjaXR5Ojc1JTtjdXJzb3I6cG9pbnRlcn0uaGVhZGVyIGJ1dHRvbi5uZXdHYW1lOmhvdmVyOmFjdGl2ZXtvcGFjaXR5OjU1JX0ubmV3R2FtZURpYWxvZ3t3aWR0aDozMDBweDtoZWlnaHQ6MjUlO3Bvc2l0aW9uOnJlbGF0aXZlO2JvcmRlci1yYWRpdXM6LjRyZW07Ym94LXNoYWRvdzoxcHggMXB4IDNweCA0cHggI2UwZmZmZjtib3JkZXI6bm9uZX0ubmV3R2FtZURpYWxvZyAubmV3R2FtZUZpZWxkc2V0e2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtnYXA6MnJlbTtoZWlnaHQ6MTAwJTtib3JkZXI6bm9uZX0ubmV3R2FtZURpYWxvZyAubmV3R2FtZUZpZWxkc2V0IC5nYW1lVHlwZUJ0bntib3JkZXI6bm9uZTtib3JkZXItcmFkaXVzOjFyZW07d2lkdGg6MTAwcHg7aGVpZ2h0OjYwcHg7YmFja2dyb3VuZC1jb2xvcjojMWU5MGZmO2N1cnNvcjpwb2ludGVyfS5uZXdHYW1lRGlhbG9nIC5uZXdHYW1lRmllbGRzZXQgLmdhbWVUeXBlQnRuOmFjdGl2ZXtvcGFjaXR5OjgwJX0ubmV3R2FtZURpYWxvZyAuZXhpdERpYWxvZ3twb3NpdGlvbjphYnNvbHV0ZTt0b3A6NCU7cmlnaHQ6MSV9LnR3b0JvYXJkc1NjcmVlbntkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOjFmciAuNWZyIDFmcjtoZWlnaHQ6Y2FsYygxMDBzdmggLSA4MHB4IC0gNjBweCk7anVzdGlmeS1pdGVtczpjZW50ZXI7YWxpZ24tY29udGVudDpjZW50ZXJ9LnR3b0JvYXJkc1NjcmVlbiAuY2VudGVyQm9hcmR7Ym9yZGVyOjFweCBzb2xpZCBwaW5rO3dpZHRoOjEwMCU7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS50d29Cb2FyZHNTY3JlZW4gLmJvYXJkT25lLC50d29Cb2FyZHNTY3JlZW4gLmJvYXJkVHdve2Rpc3BsYXk6ZmxleDtmbGV4LWZsb3c6d3JhcDt3aWR0aDo0MDBweDtoZWlnaHQ6NDAwcHh9LnR3b0JvYXJkc1NjcmVlbiAuYm9hcmRPbmUgZGl2LC50d29Cb2FyZHNTY3JlZW4gLmJvYXJkVHdvIGRpdntib3JkZXI6MXB4IHNvbGlkIGdyZWVufS50d29Cb2FyZHNTY3JlZW4gLmJvYXJkT25lIGRpdjpob3ZlciwudHdvQm9hcmRzU2NyZWVuIC5ib2FyZFR3byBkaXY6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjpyZWQgIWltcG9ydGFudH0uZm9vdGVye2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6bGVmdDthbGlnbi1pdGVtczpjZW50ZXI7Ym94LXNoYWRvdzowcHggMHB4IDNweCAxcHggI2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOmdyYXk7aGVpZ2h0OjUwcHg7cGFkZGluZzoxMHB4fS5mb290ZXIgYXtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7Y29sb3I6IzAwMDt0ZXh0LWRlY29yYXRpb246bm9uZTtwYWRkaW5nLWxlZnQ6NnJlbX1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLEVBQUUscUJBQXFCLENBQUMsS0FBSyxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsUUFBUSxZQUFZLENBQUMsNEJBQTRCLENBQUMsa0JBQWtCLENBQUMsNEJBQTRCLENBQUMsV0FBVyxDQUFDLHVCQUF1QixXQUFXLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyx3QkFBd0IsQ0FBQyxVQUFVLENBQUMsNkJBQTZCLFdBQVcsQ0FBQyxjQUFjLENBQUMsb0NBQW9DLFdBQVcsQ0FBQyxlQUFlLFdBQVcsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsbUJBQW1CLENBQUMsa0NBQWtDLENBQUMsV0FBVyxDQUFDLGdDQUFnQyxZQUFZLENBQUMsc0JBQXNCLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsNkNBQTZDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLHdCQUF3QixDQUFDLGNBQWMsQ0FBQyxvREFBb0QsV0FBVyxDQUFDLDJCQUEyQixpQkFBaUIsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGlCQUFpQixZQUFZLENBQUMsa0NBQWtDLENBQUMsaUNBQWlDLENBQUMsb0JBQW9CLENBQUMsb0JBQW9CLENBQUMsOEJBQThCLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsc0JBQXNCLENBQUMsa0JBQWtCLENBQUMsc0RBQXNELFlBQVksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyw4REFBOEQsc0JBQXNCLENBQUMsMEVBQTBFLCtCQUErQixDQUFDLFFBQVEsWUFBWSxDQUFDLG9CQUFvQixDQUFDLGtCQUFrQixDQUFDLCtCQUErQixDQUFDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsVUFBVSxZQUFZLENBQUMsc0JBQXNCLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDLGlCQUFpQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIqe2JveC1zaXppbmc6Ym9yZGVyLWJveH1ib2R5e2JhY2tncm91bmQtY29sb3I6IzAwMDtjb2xvcjojZmZmO21hcmdpbjowO2JveC1zaXppbmc6Ym9yZGVyLWJveDtoZWlnaHQ6MTAwc3ZoO292ZXJmbG93OmhpZGRlbn0uaGVhZGVye2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYXJvdW5kO2FsaWduLWl0ZW1zOmNlbnRlcjtib3JkZXItYm90dG9tOjFweCByaWRnZSAjZmZmO2hlaWdodDo4MHB4fS5oZWFkZXIgYnV0dG9uLm5ld0dhbWV7Ym9yZGVyOm5vbmU7d2lkdGg6MTIwcHg7aGVpZ2h0OjQwcHg7Ym9yZGVyLXJhZGl1czoxcmVtO2JhY2tncm91bmQtY29sb3I6ZGltZ3JheTtjb2xvcjojZmZmfS5oZWFkZXIgYnV0dG9uLm5ld0dhbWU6aG92ZXJ7b3BhY2l0eTo3NSU7Y3Vyc29yOnBvaW50ZXJ9LmhlYWRlciBidXR0b24ubmV3R2FtZTpob3ZlcjphY3RpdmV7b3BhY2l0eTo1NSV9Lm5ld0dhbWVEaWFsb2d7d2lkdGg6MzAwcHg7aGVpZ2h0OjI1JTtwb3NpdGlvbjpyZWxhdGl2ZTtib3JkZXItcmFkaXVzOi40cmVtO2JveC1zaGFkb3c6MXB4IDFweCAzcHggNHB4ICNlMGZmZmY7Ym9yZGVyOm5vbmV9Lm5ld0dhbWVEaWFsb2cgLm5ld0dhbWVGaWVsZHNldHtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7Z2FwOjJyZW07aGVpZ2h0OjEwMCU7Ym9yZGVyOm5vbmV9Lm5ld0dhbWVEaWFsb2cgLm5ld0dhbWVGaWVsZHNldCAuZ2FtZVR5cGVCdG57Ym9yZGVyOm5vbmU7Ym9yZGVyLXJhZGl1czoxcmVtO3dpZHRoOjEwMHB4O2hlaWdodDo2MHB4O2JhY2tncm91bmQtY29sb3I6IzFlOTBmZjtjdXJzb3I6cG9pbnRlcn0ubmV3R2FtZURpYWxvZyAubmV3R2FtZUZpZWxkc2V0IC5nYW1lVHlwZUJ0bjphY3RpdmV7b3BhY2l0eTo4MCV9Lm5ld0dhbWVEaWFsb2cgLmV4aXREaWFsb2d7cG9zaXRpb246YWJzb2x1dGU7dG9wOjQlO3JpZ2h0OjElfS50d29Cb2FyZHNTY3JlZW57ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczoxZnIgLjVmciAxZnI7aGVpZ2h0OmNhbGMoMTAwc3ZoIC0gODBweCAtIDYwcHgpO2p1c3RpZnktaXRlbXM6Y2VudGVyO2FsaWduLWNvbnRlbnQ6Y2VudGVyfS50d29Cb2FyZHNTY3JlZW4gLmNlbnRlckJvYXJke2JvcmRlcjoxcHggc29saWQgcGluazt3aWR0aDoxMDAlO2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcn0udHdvQm9hcmRzU2NyZWVuIC5ib2FyZE9uZSwudHdvQm9hcmRzU2NyZWVuIC5ib2FyZFR3b3tkaXNwbGF5OmZsZXg7ZmxleC1mbG93OndyYXA7d2lkdGg6NDAwcHg7aGVpZ2h0OjQwMHB4fS50d29Cb2FyZHNTY3JlZW4gLmJvYXJkT25lIGRpdiwudHdvQm9hcmRzU2NyZWVuIC5ib2FyZFR3byBkaXZ7Ym9yZGVyOjFweCBzb2xpZCBncmVlbn0udHdvQm9hcmRzU2NyZWVuIC5ib2FyZE9uZSBkaXY6aG92ZXIsLnR3b0JvYXJkc1NjcmVlbiAuYm9hcmRUd28gZGl2OmhvdmVye2JhY2tncm91bmQtY29sb3I6cmVkICFpbXBvcnRhbnR9LmZvb3RlcntkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmxlZnQ7YWxpZ24taXRlbXM6Y2VudGVyO2JveC1zaGFkb3c6MHB4IDBweCAzcHggMXB4ICNmZmY7YmFja2dyb3VuZC1jb2xvcjpncmF5O2hlaWdodDo1MHB4O3BhZGRpbmc6MTBweH0uZm9vdGVyIGF7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO2NvbG9yOiMwMDA7dGV4dC1kZWNvcmF0aW9uOm5vbmU7cGFkZGluZy1sZWZ0OjZyZW19XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkQm9hcmQoc3F1YXJlWHNxYXVyZSwgYm9hcmRDbGFzcykge1xuICBjb25zdCBib2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC4ke2JvYXJkQ2xhc3N9YCk7XG5cbiAgYm9hcmQuaW5uZXJIVE1MID0gXCJcIjtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNxdWFyZVhzcWF1cmUgKiBzcXVhcmVYc3FhdXJlOyBpKyspIHtcbiAgICBjb25zdCBzcXVhcmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuXG4gICAgLy8gbnVtYmVyaW5nIHRoZSBjZWxscy4gLSBhZGRlZCB0aGlzIHNvIGxpbmUgMCB3aWxsIGhhdmUgdHdvIGRpZ2l0cy4gXG4gICAgbGV0IGNlbGxOdW07XG4gICAgaWYgKGkgPCAxMCkge1xuICAgICAgY2VsbE51bSA9ICcwJyArIGAke2l9YFxuICAgIH0gZWxzZSB7XG4gICAgICBjZWxsTnVtID0gaTtcbiAgICB9XG5cbiAgICBzcXVhcmUuY2xhc3NMaXN0LmFkZCgnc3F1YXJlJywgYCR7Ym9hcmRDbGFzc31gLCBgJHtjZWxsTnVtLnRvU3RyaW5nKCkuc3BsaXQoJycpLmpvaW4oJzonKX1gKTtcbiAgICBzcXVhcmUuc3R5bGUud2lkdGggPSAoNDAwIC8gc3F1YXJlWHNxYXVyZSkgKyAncHgnO1xuICAgIHNxdWFyZS5zdHlsZS5oZWlnaHQgPSAoNDAwIC8gc3F1YXJlWHNxYXVyZSkgKyAncHgnO1xuICAgIHNxdWFyZS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnbGlnaHRncmF5J1xuICAgIGJvYXJkLmFwcGVuZENoaWxkKHNxdWFyZSk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoaXAge1xuICAgIGNvbnN0cnVjdG9yKGxlbmd0aCkge1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSAnJyAvL1snaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCddW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpXTtcbiAgICAgICAgdGhpcy5oaXRzID0gMDtcbiAgICAgICAgdGhpcy5zdW5rID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29yZGluYXRlcyA9IFtdO1xuICAgICAgICB0aGlzLmNsaWNrZWQgPSBbXTsgICAgIFxuICAgIH1cblxuICAgIGhpdCgpIHtcbiAgICAgICByZXR1cm4gdGhpcy5oaXRzICsrO1xuICAgIH1cblxuICAgIGlzU3VuaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGl0cyA9PSB0aGlzLmxlbmd0aCA/IHRoaXMuc3VuayA9IHRydWUgOiBmYWxzZTtcbiAgICB9XG59XG5cbiIsImltcG9ydCBTaGlwIGZyb20gXCIuL1NoaXBcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZWJvYXJkIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5ib2FyZCA9IEdhbWVib2FyZC5uZXdHYW1lQm9hcmQoKTtcbiAgICB0aGlzLnNoaXBzID0gW1xuICAgICAgbmV3IFNoaXAoMSksXG4gICAgICBuZXcgU2hpcCgxKSxcbiAgICAgIG5ldyBTaGlwKDEpLFxuICAgICAgbmV3IFNoaXAoMSksXG4gICAgICBuZXcgU2hpcCgyKSxcbiAgICAgIG5ldyBTaGlwKDIpLFxuICAgICAgbmV3IFNoaXAoMiksXG4gICAgICBuZXcgU2hpcCgzKSxcbiAgICAgIG5ldyBTaGlwKDMpLFxuICAgICAgbmV3IFNoaXAoNCksXG4gICAgXTtcbiAgICB0aGlzLmNsaWNrZWROb1NoaXAgPSBbXTtcbiAgICB0aGlzLnN1bmtTaGlwcyA9IFtdO1xuICAgIHRoaXMuY2xpY2tlZCA9IFtdO1xuICB9XG5cbiAgc3RhdGljIG5ld0dhbWVCb2FyZCgpIHtcbiAgICBsZXQgZ2FtZUJvYXJkID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICBsZXQgcm93SW5HYW1lQm9hcmQgPSBbXTtcbiAgICAgIHdoaWxlIChyb3dJbkdhbWVCb2FyZC5sZW5ndGggPCAxMCkge1xuICAgICAgICByb3dJbkdhbWVCb2FyZC5wdXNoKG51bGwpO1xuICAgICAgfVxuICAgICAgZ2FtZUJvYXJkLnB1c2gocm93SW5HYW1lQm9hcmQpO1xuICAgIH1cbiAgICByZXR1cm4gZ2FtZUJvYXJkO1xuICB9XG5cbiAgaXNBbGxTaGlwc1N1bmsoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3Vua1NoaXBzLmxlbmd0aCA9PSB0aGlzLnNoaXBzLmxlbmd0aDtcbiAgfVxuXG4gIHBsYWNlU2hpcCgpIHtcbiAgICBjb25zdCBkaXJlY3Rpb25zID0gW1wiaG9yaXpvbnRhbFwiLCBcInZlcnRpY2FsXCJdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNoaXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgcGxhY2VkID0gZmFsc2U7XG4gICAgICBsZXQgYXR0ZW1wdHMgPSAwO1xuICAgICAgY29uc3QgbWF4QXR0ZW1wdHMgPSAxMDAwMDtcblxuICAgICAgd2hpbGUgKCFwbGFjZWQgJiYgYXR0ZW1wdHMgPCBtYXhBdHRlbXB0cykge1xuICAgICAgICBjb25zdCB4Um93UmFuZG9tTnVtID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xuICAgICAgICBjb25zdCB5Q291bG1uUmFuZG9tTnVtID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xuICAgICAgICBjb25zdCBkaXJlY3Rpb24gPVxuICAgICAgICAgIGRpcmVjdGlvbnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZGlyZWN0aW9ucy5sZW5ndGgpXTtcblxuICAgICAgICB0aGlzLnNoaXBzW2ldLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICAgICAgbGV0IGNhblBsYWNlID0gdHJ1ZTtcblxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2hpcCBjYW4gYmUgcGxhY2VkIHdpdGhvdXQgdG91Y2hpbmcgYW5vdGhlciBzaGlwXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09IFwidmVydGljYWxcIikge1xuICAgICAgICAgIGlmICh4Um93UmFuZG9tTnVtICsgdGhpcy5zaGlwc1tpXS5sZW5ndGggLSAxID49IDEwKSB7XG4gICAgICAgICAgICBjYW5QbGFjZSA9IGZhbHNlOyAvLyBTaGlwIHdvdWxkIGdvIG91dCBvZiBib3VuZHNcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgeiA9IC0xOyB6IDw9IHRoaXMuc2hpcHNbaV0ubGVuZ3RoOyB6KyspIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgayA9IC0xOyBrIDw9IDE7IGsrKykge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIHhSb3dSYW5kb21OdW0gKyB6ID49IDAgJiZcbiAgICAgICAgICAgICAgICAgIHhSb3dSYW5kb21OdW0gKyB6IDwgMTAgJiZcbiAgICAgICAgICAgICAgICAgIHlDb3VsbW5SYW5kb21OdW0gKyBrID49IDAgJiZcbiAgICAgICAgICAgICAgICAgIHlDb3VsbW5SYW5kb21OdW0gKyBrIDwgMTAgJiZcbiAgICAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbeFJvd1JhbmRvbU51bSArIHpdPy5beUNvdWxtblJhbmRvbU51bSArIGtdICE9PSBudWxsXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBjYW5QbGFjZSA9IGZhbHNlOyAvLyBBIG5laWdoYm9yaW5nIHNxdWFyZSBpcyBvY2N1cGllZFxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICghY2FuUGxhY2UpIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2FuUGxhY2UpIHtcbiAgICAgICAgICAgIGZvciAobGV0IHogPSAwOyB6IDwgdGhpcy5zaGlwc1tpXS5sZW5ndGg7IHorKykge1xuICAgICAgICAgICAgICB0aGlzLmJvYXJkW3hSb3dSYW5kb21OdW0gKyB6XVt5Q291bG1uUmFuZG9tTnVtXSA9IDE7XG4gICAgICAgICAgICAgIHRoaXMuc2hpcHNbaV0uY29yZGluYXRlcy5wdXNoKFxuICAgICAgICAgICAgICAgIGAke3hSb3dSYW5kb21OdW0gKyB6fToke3lDb3VsbW5SYW5kb21OdW19YFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGxhY2VkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSBcImhvcml6b250YWxcIikge1xuICAgICAgICAgIGlmICh5Q291bG1uUmFuZG9tTnVtICsgdGhpcy5zaGlwc1tpXS5sZW5ndGggLSAxID49IDEwKSB7XG4gICAgICAgICAgICBjYW5QbGFjZSA9IGZhbHNlOyAvLyBTaGlwIHdvdWxkIGdvIG91dCBvZiBib3VuZHNcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgeiA9IC0xOyB6IDw9IHRoaXMuc2hpcHNbaV0ubGVuZ3RoOyB6KyspIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgayA9IC0xOyBrIDw9IDE7IGsrKykge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIHhSb3dSYW5kb21OdW0gKyBrID49IDAgJiZcbiAgICAgICAgICAgICAgICAgIHhSb3dSYW5kb21OdW0gKyBrIDwgMTAgJiZcbiAgICAgICAgICAgICAgICAgIHlDb3VsbW5SYW5kb21OdW0gKyB6ID49IDAgJiZcbiAgICAgICAgICAgICAgICAgIHlDb3VsbW5SYW5kb21OdW0gKyB6IDwgMTAgJiZcbiAgICAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbeFJvd1JhbmRvbU51bSArIGtdPy5beUNvdWxtblJhbmRvbU51bSArIHpdICE9PSBudWxsXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBjYW5QbGFjZSA9IGZhbHNlOyAvLyBBIG5laWdoYm9yaW5nIHNxdWFyZSBpcyBvY2N1cGllZFxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICghY2FuUGxhY2UpIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2FuUGxhY2UpIHtcbiAgICAgICAgICAgIGZvciAobGV0IHogPSAwOyB6IDwgdGhpcy5zaGlwc1tpXS5sZW5ndGg7IHorKykge1xuICAgICAgICAgICAgICB0aGlzLmJvYXJkW3hSb3dSYW5kb21OdW1dW3lDb3VsbW5SYW5kb21OdW0gKyB6XSA9IDE7XG4gICAgICAgICAgICAgIHRoaXMuc2hpcHNbaV0uY29yZGluYXRlcy5wdXNoKFxuICAgICAgICAgICAgICAgIGAke3hSb3dSYW5kb21OdW19OiR7eUNvdWxtblJhbmRvbU51bSArIHp9YFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGxhY2VkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBhdHRlbXB0cysrO1xuICAgICAgICBpZiAoYXR0ZW1wdHMgPj0gbWF4QXR0ZW1wdHMpIHtcbiAgICAgICAgICBpLS07IC8vIEJhY2t0cmFjayB0byB0aGUgcHJldmlvdXMgc2hpcCBhbmQgdHJ5IGEgZGlmZmVyZW50IGNvbmZpZ3VyYXRpb25cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYXR0ZW1wdHMgPj0gbWF4QXR0ZW1wdHMpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBwbGFjZSB0aGUgc2hpcCBhZnRlciBtYXhpbXVtIGF0dGVtcHRzXCIpO1xuICAgICAgICB0aGlzLnJlc2V0Qm9hcmQoKTsgLy8gT3B0aW9uYWxseSByZXNldCB0aGUgYm9hcmQgYW5kIHN0YXJ0IG92ZXJcbiAgICAgICAgaSA9IC0xOyAvLyBSZXN0YXJ0IHRoZSBwcm9jZXNzXG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJlY2VpdmVBdHRhY2soY29yZGluYXRlLCBldmVudCkge1xuICAgIGlmICh0aGlzLmNsaWNrZWQuaW5jbHVkZXMoY29yZGluYXRlKSkge1xuICAgICAgY29uc29sZS5sb2coXCJhbHJlYWR5IGNsaWNrZWRcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5jbGlja2VkLnB1c2goY29yZGluYXRlKTtcblxuICAgIGlmICh0aGlzLmlzQWxsU2hpcHNTdW5rKCkpIHJldHVybjtcbiAgICBpZiAodGhpcy5jbGlja2VkTm9TaGlwLmluY2x1ZGVzKGNvcmRpbmF0ZSkpIHJldHVybjtcblxuICAgIGxldCBoaXQgPSBmYWxzZTtcbiAgICB0aGlzLnNoaXBzLmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgIGlmIChzaGlwLmNsaWNrZWQuaW5jbHVkZXMoY29yZGluYXRlKSkgcmV0dXJuO1xuICAgICAgaWYgKHNoaXAuY29yZGluYXRlcy5pbmNsdWRlcyhjb3JkaW5hdGUpKSB7XG4gICAgICAgIHNoaXAuaGl0KCk7XG4gICAgICAgIHNoaXAuY2xpY2tlZC5wdXNoKGNvcmRpbmF0ZSk7XG4gICAgICAgIHRoaXMuYm9hcmRbY29yZGluYXRlLnNsaWNlKDAsIDEpXVtjb3JkaW5hdGUuc2xpY2UoMildID0gMjtcbiAgICAgICAgZXZlbnQuc3R5bGUuYmFja2dyb3VuZCA9IFwiZ3JheSBjZW50ZXIvMTEwJSB1cmwoJy4vaW1hZ2Uvbm91bi1zaGlwLTQ4OTcwOTUuc3ZnJylcIlxuICAgICAgICBoaXQgPSB0cnVlO1xuXG4gICAgICAgIGlmIChzaGlwLmlzU3VuaygpKSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwLmNvcmRpbmF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgZXZlbnQucGFyZW50Tm9kZS5jaGlsZHJlbi5sZW5ndGg7IG4rKykge1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgZXZlbnQucGFyZW50Tm9kZS5jaGlsZHJlbltuXS5jbGFzc0xpc3QuY29udGFpbnMoXG4gICAgICAgICAgICAgICAgICBzaGlwLmNvcmRpbmF0ZXNbaV1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnBhcmVudE5vZGUuY2hpbGRyZW5bbl0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJvcmFuZ2VcIjsgLy8gb3JuYWdlIG1lYW5zIGFsbCBzaGlwIHN1bmtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnN1bmtTaGlwcy5wdXNoKHNoaXApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFoaXQgJiYgIXRoaXMuY2xpY2tlZE5vU2hpcC5pbmNsdWRlcyhjb3JkaW5hdGUpKSB7XG4gICAgICAgIHRoaXMuY2xpY2tlZE5vU2hpcC5wdXNoKGNvcmRpbmF0ZSk7XG4gICAgICAgIGV2ZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7IC8vIHJlZCBtZWFucyBubyBzaGlwIGluIHNxdWFyZS5cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8vIHBsYWNlU2hpcCgpIHtcbi8vICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNoaXBzLmxlbmd0aDsgaSsrKSB7XG4vLyAgICAgbGV0IHBsYWNlZCA9IGZhbHNlO1xuXG4vLyAgICAgd2hpbGUgKCFwbGFjZWQpIHtcbi8vICAgICAgIC8vd2lsbCBnaXZlIG1lIGEgcmFuZG9tIGludGVnZXIgbnVtYmVyIGJldHdlZW4gMC05LlxuLy8gICAgICAgY29uc3QgeFJvd1JhbmRvbU51bSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgxMCAtIDApKTtcbi8vICAgICAgIGNvbnN0IHlDb3VsbW5SYW5kb21OdW0gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoMTAgLSAwKSk7XG5cbi8vICAgICAgIGxldCBjYW5QbGFjZSA9IHRydWU7XG5cbi8vICAgICAgIGlmICh0aGlzLnNoaXBzW2ldLmRpcmVjdGlvbiA9PSBcImhvcml6b250YWxcIikge1xuLy8gICAgICAgICBpZiAodGhpcy5zaGlwc1tpXS5sZW5ndGggKyB4Um93UmFuZG9tTnVtID4gOSkge1xuLy8gICAgICAgICAgIGNhblBsYWNlID0gZmFsc2U7XG4vLyAgICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgICAgZm9yIChsZXQgeiA9IC0xOyB6IDw9IHRoaXMuc2hpcHNbaV0ubGVuZ3RoOyB6KyspIHtcbi8vICAgICAgICAgICAgIGZvciAobGV0IGsgPSAtMTsgayA8PSAxOyBrKyspIHtcbi8vICAgICAgICAgICAgICAgaWYgKFxuLy8gICAgICAgICAgICAgICAgIHhSb3dSYW5kb21OdW0gKyB6ID49IDAgJiZcbi8vICAgICAgICAgICAgICAgICB4Um93UmFuZG9tTnVtICsgeiA8IDEwICYmXG4vLyAgICAgICAgICAgICAgICAgeUNvdWxtblJhbmRvbU51bSArIGsgPj0gMCAmJlxuLy8gICAgICAgICAgICAgICAgIHlDb3VsbW5SYW5kb21OdW0gKyBrIDwgMTAgJiZcbi8vICAgICAgICAgICAgICAgICB0aGlzLmJvYXJkW3hSb3dSYW5kb21OdW0gKyB6XT8uW3lDb3VsbW5SYW5kb21OdW0gKyBrXSAhPT0gbnVsbFxuLy8gICAgICAgICAgICAgICApIHtcbi8vICAgICAgICAgICAgICAgICBjYW5QbGFjZSA9IGZhbHNlOyAvLyBBIG5laWdoYm9yaW5nIHNxdWFyZSBpcyBvY2N1cGllZFxuLy8gICAgICAgICAgICAgICAgIGJyZWFrO1xuLy8gICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICBpZiAoIWNhblBsYWNlKSBicmVhaztcbi8vICAgICAgICAgICB9XG4vLyAgICAgICAgIH1cbi8vICAgICAgICAgaWYgKGNhblBsYWNlKSB7XG4vLyAgICAgICAgICAgZm9yIChsZXQgeiA9IDA7IHogPCB0aGlzLnNoaXBzW2ldLmxlbmd0aDsgeisrKSB7XG4vLyAgICAgICAgICAgICB0aGlzLmJvYXJkW3hSb3dSYW5kb21OdW0gKyB6XVt5Q291bG1uUmFuZG9tTnVtXSA9IDE7XG4vLyAgICAgICAgICAgfVxuLy8gICAgICAgICAgIHBsYWNlZCA9IHRydWU7XG4vLyAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5zaGlwc1tpXS5kaXJlY3Rpb24gPT0gXCJ2ZXJ0aWNhbFwiKSB7XG4vLyAgICAgICAgICAgaWYgKHlDb3VsbW5SYW5kb21OdW0gKyB0aGlzLnNoaXBzW2ldLmxlbmd0aCAtIDEgPj0gMTApIHtcbi8vICAgICAgICAgICAgIGNhblBsYWNlID0gZmFsc2U7IC8vIFNoaXAgd291bGQgZ28gb3V0IG9mIGJvdW5kc1xuLy8gICAgICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgICAgICBmb3IgKGxldCB6ID0gLTE7IHogPD0gdGhpcy5zaGlwc1tpXS5sZW5ndGg7IHorKykge1xuLy8gICAgICAgICAgICAgICBmb3IgKGxldCBrID0gLTE7IGsgPD0gMTsgaysrKSB7XG4vLyAgICAgICAgICAgICAgICAgaWYgKFxuLy8gICAgICAgICAgICAgICAgICAgeFJvd1JhbmRvbU51bSArIGsgPj0gMCAmJlxuLy8gICAgICAgICAgICAgICAgICAgeFJvd1JhbmRvbU51bSArIGsgPCAxMCAmJlxuLy8gICAgICAgICAgICAgICAgICAgeUNvdWxtblJhbmRvbU51bSArIHogPj0gMCAmJlxuLy8gICAgICAgICAgICAgICAgICAgeUNvdWxtblJhbmRvbU51bSArIHogPCAxMCAmJlxuLy8gICAgICAgICAgICAgICAgICAgdGhpcy5ib2FyZFt4Um93UmFuZG9tTnVtICsga10/Llt5Q291bG1uUmFuZG9tTnVtICsgel0gIT09XG4vLyAgICAgICAgICAgICAgICAgICAgIG51bGxcbi8vICAgICAgICAgICAgICAgICApIHtcbi8vICAgICAgICAgICAgICAgICAgIGNhblBsYWNlID0gZmFsc2U7IC8vIEEgbmVpZ2hib3Jpbmcgc3F1YXJlIGlzIG9jY3VwaWVkXG4vLyAgICAgICAgICAgICAgICAgICBicmVhaztcbi8vICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgaWYgKCFjYW5QbGFjZSkgYnJlYWs7XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgfVxuLy8gICAgICAgICAgIGlmIChjYW5QbGFjZSkge1xuLy8gICAgICAgICAgICAgZm9yIChsZXQgeiA9IDA7IHogPCB0aGlzLnNoaXBzW2ldLmxlbmd0aDsgeisrKSB7XG4vLyAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbeFJvd1JhbmRvbU51bV1beUNvdWxtblJhbmRvbU51bSArIHpdID0gMTtcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIHBsYWNlZCA9IHRydWU7XG4vLyAgICAgICAgICAgfVxuLy8gICAgICAgICB9XG4vLyAgICAgICB9XG4vLyAgICAgfVxuLy8gICB9XG5cbi8vICAgLy8gcmVzdGFydFNoaXA6IGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zaGlwcy5sZW5ndGg7IGkrKykge1xuLy8gICAvLyAgIC8vIHdpbGwgZ2l2ZSBtZSBhIHJhbmRvbSBpbnRlZ2VyIG51bWJlciBiZXR3ZWVuIDAtOS5cbi8vICAgLy8gICBjb25zdCB4Um93UmFuZG9tTnVtID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKDEwIC0gMCkpO1xuLy8gICAvLyAgIGNvbnN0IHlDb3VsbW5SYW5kb21OdW0gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoMTAgLSAwKSk7XG4vLyAgIC8vICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLnNoaXBzW2ldLmxlbmd0aDsgaisrKSB7XG4vLyAgIC8vICAgICBpZiAodGhpcy5zaGlwc1tpXS5kaXJlY3Rpb24gPT0gXCJob3Jpem9udGFsXCIpIHtcbi8vICAgLy8gICAgICAgZm9yIChsZXQgeiA9IDA7IHogPCB0aGlzLnNoaXBzW2ldLmxlbmd0aDsgeisrKSB7XG4vLyAgIC8vICAgICAgICAgaWYgKHhSb3dSYW5kb21OdW0gKyB6ID4gOSB8fCB0aGlzLmJvYXJkW3hSb3dSYW5kb21OdW0gKyB6XT8uW3lDb3VsbW5SYW5kb21OdW1dICE9PSBudWxsKSB7XG4vLyAgIC8vICAgICAgICAgICAvLyB0aGlzIHdpbGwgY2hlY2sgdGhlIGFsbCB0aGUgeCBjZWxscyBhcmUgZW1wdHkuXG4vLyAgIC8vICAgICAgICAgICBpLS07XG4vLyAgIC8vICAgICAgICAgICBjb250aW51ZSByZXN0YXJ0U2hpcDtcbi8vICAgLy8gICAgICAgICB9XG4vLyAgIC8vICAgICAgIH1cbi8vICAgLy8gICAgICAgdGhpcy5ib2FyZFt4Um93UmFuZG9tTnVtICsgal1beUNvdWxtblJhbmRvbU51bV0gPSAxO1xuLy8gICAvLyAgICAgfSBpZiAodGhpcy5zaGlwc1tpXS5kaXJlY3Rpb24gPT0gXCJ2ZXJ0aWNhbFwiKSB7XG4vLyAgIC8vICAgICAgIGZvciAobGV0IHogPSAwOyB6IDwgdGhpcy5zaGlwc1tpXS5sZW5ndGg7IHorKykge1xuLy8gICAvLyAgICAgICAgIGlmICh0aGlzLmJvYXJkW3hSb3dSYW5kb21OdW1dPy5beUNvdWxtblJhbmRvbU51bSArIHpdICE9IG51bGwgfHwgeUNvdWxtblJhbmRvbU51bSArIHogPiA5KSB7XG4vLyAgIC8vICAgICAgICAgICAvLyB0aGlzIHdpbGwgY2hlY2sgdGhlIGFsbCB0aGUgeSBjZWxscyBhcmUgZW1wdHkuXG4vLyAgIC8vICAgICAgICAgICBpLS07XG4vLyAgIC8vICAgICAgICAgICBjb250aW51ZSByZXN0YXJ0U2hpcDtcbi8vICAgLy8gICAgICAgICB9XG4vLyAgIC8vICAgICAgIH1cbi8vICAgLy8gICAgICAgdGhpcy5ib2FyZFt4Um93UmFuZG9tTnVtXVt5Q291bG1uUmFuZG9tTnVtICsgal0gPSAxO1xuLy8gICAvLyAgICAgfVxuLy8gICAvLyAgIH1cbi8vICAgLy8gfVxuLy8gfVxuXG4vLyBpIG5lZWQgdG8gYnVpbGQgYW4gYWRqYWNlbmN5IG1hdHJpY2UgdG8gcmVwcmVzZW50IHRoZSBib2FyZCwgZnJvbSB0aGUga2hhbiBhY2FkZW15IGxlc3Nvbi5HYW1lYm9hcmRcbi8vIGl0IHdpbGwgbG9vayBzb21ldGhpbmcgbGlrZSB0aGlzOlxuXG4vLyBbIFswLCAxLCAwLCAwLCAwLCAwLCAxLCAwLCAxLCAwXSxcbi8vICAgWzEsIDAsIDAsIDAsIDEsIDAsIDEsIDAsIDAsIDFdLFxuLy8gICBbMCwgMCwgMCwgMCwgMSwgMCwgMSwgMCwgMCwgMF0sXG4vLyAgIFswLCAwLCAwLCAwLCAxLCAxLCAwLCAwLCAxLCAwXSxcbi8vICAgWzAsIDEsIDEsIDEsIDAsIDEsIDAsIDAsIDAsIDFdLFxuLy8gICBbMCwgMCwgMCwgMSwgMSwgMCwgMCwgMCwgMCwgMF0sXG4vLyAgIFsxLCAxLCAxLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSxcbi8vICAgWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDEsIDFdLFxuLy8gICBbMSwgMCwgMCwgMSwgMCwgMCwgMCwgMSwgMCwgMF0sXG4vLyAgIFswLCAxLCAwLCAwLCAxLCAwLCAwLCAxLCAwLCAwXSBdXG5cbi8vIC10aGUgc3RhcnRpbmcgYm9hcmQgd2lsbCBiZSBhbGwgMC5cbi8vIC1pZiB0aGVyZSdzIGEgc2hpcCAobmVlZCB0byBsZWFybiBob3cgdG8gcHV0IHRoZSBzaGlwKSBpdCB3aWxsIGJlIDEuXG4vLyAtaWYgdGhlcmUncyBhIGhpdCBpdCB3aWxsIGJlIDIgZm9yIGV4YW1wbGUuXG4iLCJpbXBvcnQgR2FtZWJvYXJkIGZyb20gXCIuL2dhbWVib2FyZFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbGF5ZXIge1xuICBjb25zdHJ1Y3Rvcih0eXBlLCBuYW1lKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuZ2FtZUJvYXJkID0gbmV3IEdhbWVib2FyZCgpO1xuICB9XG5cbiAgcGxheWVyVHlwZUJvYXJkQnVpbGRpbmcoKSB7XG4gICAgbGV0IGJvYXJkQ2xhc3M7XG4gICAgdGhpcy50eXBlID09IFwicmVhbFwiXG4gICAgICA/IChib2FyZENsYXNzID0gXCIuYm9hcmRPbmVcIilcbiAgICAgIDogKGJvYXJkQ2xhc3MgPSBcIi5ib2FyZFR3b1wiKTtcbiAgICBsZXQgc2hpcHNEcmF3ID0gW107XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLmdhbWVCb2FyZC5ib2FyZC5sZW5ndGg7IHgrKykge1xuICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLmdhbWVCb2FyZC5ib2FyZFt4XS5sZW5ndGg7IHkrKykge1xuICAgICAgICBpZiAodGhpcy5nYW1lQm9hcmQuYm9hcmRbeF1beV0gIT09IG51bGwpIHNoaXBzRHJhdy5wdXNoKGAke3h9OiR7eX1gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzcXVhcmVJbkJvYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgJHtib2FyZENsYXNzfS5zcXVhcmVgKTtcblxuICAgIHNxdWFyZUluQm9hcmQuZm9yRWFjaCgoc3F1YXJlKSA9PiB7XG4gICAgICBzcXVhcmUuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJsaWdodGdyYXlcIjtcbiAgICAgIGZvciAobGV0IGMgPSAwOyBjIDw9IHNoaXBzRHJhdy5sZW5ndGg7IGMrKykge1xuICAgICAgICBpZiAoc3F1YXJlLmNsYXNzTGlzdC5jb250YWlucyhzaGlwc0RyYXdbY10pKSB7XG4gICAgICAgICAgdGhpcy50eXBlID09IFwicmVhbFwiXG4gICAgICAgICAgICA/IChzcXVhcmUuc3R5bGUuYmFja2dyb3VuZCA9IFwid2hpdGUgY2VudGVyLzExMCUgdXJsKCcuL2ltYWdlL25vdW4tc2hpcC00ODk3MDk1LnN2ZycpXCIpXG4gICAgICAgICAgICA6IChzcXVhcmUuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJsaWdodGdyYXlcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG1hY2hpbmVBdHRhY2sgKCkge1xuXG4gIH1cbn1cblxuLy8gYWRkIHBvaW50cz8gbmFtZT8gd2F5IG9mIHBsYWNpbmcgc2hpcHM/IGlmIGNvbXAgLSBhdHRhY2sgY2xvc2Ugc3F1cmUgYWZ0ZXIgaGl0P1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZSB7XG4gIGNvbnN0cnVjdG9yKHBsYXllcjEsIHBsYXllcjIpIHtcbiAgICB0aGlzLnBsYXllcnMgPSBbcGxheWVyMSwgcGxheWVyMl07XG4gICAgdGhpcy5jdXJyZW50VHVybkluZGV4ID0gMDtcbiAgfVxuXG4gIGdldEN1cnJuZXRQbGF5ZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMucGxheWVyc1t0aGlzLmN1cnJlbnRUdXJuSW5kZXhdO1xuICB9XG5cbiAgc3dpY2hUdXJucygpIHtcbiAgICB0aGlzLmN1cnJlbnRUdXJuSW5kZXggPSAxIC0gdGhpcy5jdXJyZW50VHVybkluZGV4O1xuICB9XG5cbiAgc3RhcnRHYW1lKCkge1xuICAgIHRoaXMucGxheWVycy5mb3JFYWNoKChwbGF5ZXIpID0+IHtcbiAgICAgIHBsYXllci5nYW1lQm9hcmQucGxhY2VTaGlwKCk7XG4gICAgICBwbGF5ZXIucGxheWVyVHlwZUJvYXJkQnVpbGRpbmcoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGdhbWVPdmVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLnBsYXllcnNbMF0uZ2FtZUJvYXJkLmlzQWxsU2hpcHNTdW5rKCkgfHxcbiAgICAgIHRoaXMucGxheWVyc1sxXS5nYW1lQm9hcmQuaXNBbGxTaGlwc1N1bmsoKVxuICAgICk7XG4gIH1cblxuICBwbGF5R2FtZSgpIHtcbiAgICBpZiAodGhpcy5nYW1lT3ZlcigpKSByZXR1cm47XG4gICAgY29uc3QgY3VycmVudFBsYXllciA9IHRoaXMuZ2V0Q3Vycm5ldFBsYXllcigpO1xuICAgIGNvbnN0IG9wcG9uZW50ID0gdGhpcy5wbGF5ZXJzWzEgLSB0aGlzLmN1cnJlbnRUdXJuSW5kZXhdO1xuICAgIC8vIGNvbnNvbGUubG9nKGN1cnJlbnRQbGF5ZXIpXG5cbiAgICBsZXQgYm9hcmRDbGFzcztcbiAgICBjdXJyZW50UGxheWVyID09IHRoaXMucGxheWVyc1sxXVxuICAgICAgPyAoYm9hcmRDbGFzcyA9IFwiLmJvYXJkT25lXCIpXG4gICAgICA6IChib2FyZENsYXNzID0gXCIuYm9hcmRUd29cIik7XG5cbiAgICBjb25zdCBzcXVhcmVJbkJvYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgJHtib2FyZENsYXNzfS5zcXVhcmVgKTtcblxuICAgIGNvbnN0IGhhbmRsZUNsaWNrID0gKGUpID0+IHtcbiAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJjbGlja2VkU3F1YXJlXCIpO1xuICAgICAgY29uc3QgdmFsaWRNb3ZlID0gb3Bwb25lbnQuZ2FtZUJvYXJkLnJlY2VpdmVBdHRhY2soXG4gICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdFsyXSxcbiAgICAgICAgZS50YXJnZXRcbiAgICAgICk7XG5cbiAgICAgIGlmICh2YWxpZE1vdmUpIHtcbiAgICAgICAgLy8gY29uc3QgaGl0ID0gY3VycmVudFBsYXllci5hdHRhY2sob3Bwb25lbnQsIGNvcmRpbmF0ZSwgZXZlbnRUYXJnZXQpO1xuICAgICAgICBpZiAob3Bwb25lbnQuZ2FtZUJvYXJkLmlzQWxsU2hpcHNTdW5rKCkpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgJHtjdXJyZW50UGxheWVyLm5hbWV9IHdpbnMhYCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zd2ljaFR1cm5zKCk7XG5cbiAgICAgICAgc3F1YXJlSW5Cb2FyZC5mb3JFYWNoKChzcXVhcmUpID0+XG4gICAgICAgICAgc3F1YXJlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVDbGljaylcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnBsYXlHYW1lKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBzcXVhcmVJbkJvYXJkLmZvckVhY2goKHNxdWFyZSkgPT4ge1xuICAgICAgc3F1YXJlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVDbGljaywgeyBvbmNlOiB0cnVlIH0pO1xuICAgIH0pO1xuXG4gICAgY29uc3QgYm9hcmRPbmVTcXVhcmVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5ib2FyZE9uZS5zcXVhcmVcIik7XG5cbiAgICBjb25zdCBtYWNoaW5lQ2xpY2tSYW5kb20gPSAoKSA9PiB7XG4gICAgICBsZXQgbm90Q2xpY2tlZEJ5TWFjaGluZSA9IEFycmF5LmZyb20oYm9hcmRPbmVTcXVhcmVzKS5maWx0ZXIoXG4gICAgICAgICh4KSA9PiAheC5jbGFzc0xpc3QuY29udGFpbnMoXCJjbGlja2VkU3F1YXJlXCIpXG4gICAgICApO1xuICAgICAgbGV0IE5leHRNYWNoaW5lQ2xpY2sgPSBub3RDbGlja2VkQnlNYWNoaW5lW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG5vdENsaWNrZWRCeU1hY2hpbmUubGVuZ3RoKV07XG5cbiAgICAgIE5leHRNYWNoaW5lQ2xpY2suY2xpY2soKTsgXG4gICAgfTtcblxuICAgIGlmIChjdXJyZW50UGxheWVyLnR5cGUgPT0gXCJtYWNoaW5lXCIpXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgbWFjaGluZUNsaWNrUmFuZG9tKCk7XG4gICAgICB9LCA1MDApO1xuICB9XG59XG4iLCJpbXBvcnQgXCIuLi9zdHlsZXMvc3R5bGUuY3NzXCI7XG4vLyBpbXBvcnQgeyBTaGlwIH0gZnJvbSBcIi4vU2hpcFwiO1xuLy8gaW1wb3J0IEdhbWVib2FyZCBmcm9tIFwiLi9nYW1lYm9hcmRcIjtcbmltcG9ydCBidWlsZEJvYXJkIGZyb20gXCIuL2J1aWxkQm9hcmRET01cIjtcbmltcG9ydCBQbGF5ZXIgZnJvbSBcIi4vcGxheWVyXCI7XG5pbXBvcnQgR2FtZSBmcm9tIFwiLi9nYW1lXCI7XG5cblxuYnVpbGRCb2FyZCgxMCwgXCJib2FyZE9uZVwiKTtcbmJ1aWxkQm9hcmQoMTAsIFwiYm9hcmRUd29cIik7XG5cblxuXG5jb25zdCBodW1hblZzSHVtYW5OZXdHYW1lQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmh1bWFuVnNIdW1hbk5ld0dhbWVCdG4nKTtcblxuaHVtYW5Wc0h1bWFuTmV3R2FtZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycgLCAoKT0+e1xuICBjb25zdCBwbGF5ZXJPbmUgPSBuZXcgUGxheWVyKCdyZWFsJywgJ0h1bWFuJyk7XG4gIGNvbnN0IG1hY2hpbmVQbGF5ZXIgPSBuZXcgUGxheWVyKCdtYWNoaW5lJywgJ01hY2hpbmEnKTtcbiAgY29uc3QgZ2FtZSA9IG5ldyBHYW1lKHBsYXllck9uZSwgbWFjaGluZVBsYXllcik7XG4gIGdhbWUuc3RhcnRHYW1lKCk7XG4gIGdhbWUucGxheUdhbWUoKTtcbiAgbmV3R2FtZURpYWxvZy5jbG9zZSgpO1xufSlcblxuXG5jb25zdCBuZXdHYW1lQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uZXdHYW1lXCIpO1xuY29uc3QgbmV3R2FtZURpYWxvZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmV3R2FtZURpYWxvZ1wiKTtcblxubmV3R2FtZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBuZXdHYW1lRGlhbG9nLnNob3dNb2RhbCgpO1xuXG4gIGNvbnN0IGV4aXREaWFsb2dCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmV4aXREaWFsb2dcIik7XG5cbiAgZXhpdERpYWxvZ0J0bi5vbmNsaWNrID0gKCkgPT4ge1xuICAgIG5ld0dhbWVEaWFsb2cuY2xvc2UoKTtcbiAgfTtcbn0pO1xuXG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm5jIiwiYnVpbGRCb2FyZCIsInNxdWFyZVhzcWF1cmUiLCJib2FyZENsYXNzIiwiYm9hcmQiLCJpbm5lckhUTUwiLCJzcXVhcmUiLCJjZWxsTnVtIiwiY2xhc3NMaXN0IiwiYWRkIiwic3BsaXQiLCJ3aWR0aCIsImhlaWdodCIsImJhY2tncm91bmRDb2xvciIsImxvY2FscyIsIlNoaXAiLCJjb25zdHJ1Y3RvciIsImRpcmVjdGlvbiIsImhpdHMiLCJzdW5rIiwiY29yZGluYXRlcyIsImNsaWNrZWQiLCJoaXQiLCJpc1N1bmsiLCJHYW1lYm9hcmQiLCJuZXdHYW1lQm9hcmQiLCJzaGlwcyIsImNsaWNrZWROb1NoaXAiLCJzdW5rU2hpcHMiLCJnYW1lQm9hcmQiLCJyb3dJbkdhbWVCb2FyZCIsImlzQWxsU2hpcHNTdW5rIiwicGxhY2VTaGlwIiwiZGlyZWN0aW9ucyIsInBsYWNlZCIsImF0dGVtcHRzIiwibWF4QXR0ZW1wdHMiLCJ4Um93UmFuZG9tTnVtIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwieUNvdWxtblJhbmRvbU51bSIsImNhblBsYWNlIiwieiIsImNvbnNvbGUiLCJlcnJvciIsInJlc2V0Qm9hcmQiLCJyZWNlaXZlQXR0YWNrIiwiY29yZGluYXRlIiwiZXZlbnQiLCJpbmNsdWRlcyIsImxvZyIsImZvckVhY2giLCJzaGlwIiwic2xpY2UiLCJiYWNrZ3JvdW5kIiwiY2hpbGRyZW4iLCJjb250YWlucyIsIlBsYXllciIsInR5cGUiLCJuYW1lIiwicGxheWVyVHlwZUJvYXJkQnVpbGRpbmciLCJzaGlwc0RyYXciLCJ4IiwieSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjIiwibWFjaGluZUF0dGFjayIsIkdhbWUiLCJwbGF5ZXIxIiwicGxheWVyMiIsInBsYXllcnMiLCJjdXJyZW50VHVybkluZGV4IiwiZ2V0Q3Vycm5ldFBsYXllciIsInN3aWNoVHVybnMiLCJzdGFydEdhbWUiLCJwbGF5ZXIiLCJnYW1lT3ZlciIsInBsYXlHYW1lIiwiY3VycmVudFBsYXllciIsIm9wcG9uZW50Iiwic3F1YXJlSW5Cb2FyZCIsImhhbmRsZUNsaWNrIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbmNlIiwiYm9hcmRPbmVTcXVhcmVzIiwic2V0VGltZW91dCIsIm5vdENsaWNrZWRCeU1hY2hpbmUiLCJBcnJheSIsImZyb20iLCJmaWx0ZXIiLCJjbGljayIsIm1hY2hpbmVDbGlja1JhbmRvbSIsInBsYXllck9uZSIsIm1hY2hpbmVQbGF5ZXIiLCJnYW1lIiwibmV3R2FtZURpYWxvZyIsImNsb3NlIiwibmV3R2FtZUJ0biIsInNob3dNb2RhbCIsIm9uY2xpY2siXSwic291cmNlUm9vdCI6IiJ9